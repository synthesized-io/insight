# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.9

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install virtualenv
          command: sudo python3 -m pip install virtualenv

      - run:
          name: Install dependencies
          command: make venv

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
        - image: circleci/python:3.6.9
    parallelism: 5
    steps:
      # Reuse the workspace from the build job
      - attach_workspace:
          at: .

      - run:
          name: Linter
          command: make lint

      - run:
          name: Run Tests
          command: circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings --timings-type=filename --show-counts | xargs venv/bin/python3 -m pytest -v -m 'fast or slow' --junitxml=test-results/junit.xml
          no_output_timeout: 30m

      - run:
          name: Reformat junit XML
          command: venv/bin/python3 tests/junit-fix.py
          when: always

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  publish:
    docker:
      - image: circleci/python:3.6.9

    steps:
      # Reuse the workspace from the build job
      - attach_workspace:
          at: .

      - run:
          name: Package
          command: make build

      - store_artifacts:
          path: dist
          destination: dist

      - run:
          name: Publish artifacts
          command: |
            for f in dist/*; do
              curl -f -F package=@"${f}" https://${FURY_PUSH_TOKEN}@push.fury.io/synthesized/
            done;

workflows:
  version: 2
  build-test-publish:
    jobs:
      - build
      - test:
          requires:
            - build
      - publish:
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - master
                - r\d\.\d.*
          requires:
            - test
