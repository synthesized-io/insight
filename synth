#!/usr/bin/env python3

import argparse
import sys
import time
import warnings

import pandas as pd
from scipy.stats import ks_2samp

warnings.filterwarnings(action='ignore', message='compiletime version 3.5 of module')

parser = argparse.ArgumentParser()
parser.add_argument('filename', metavar='FILE', help='A file name')
parser.add_argument('-o', '--output', required=True, help='Name of output file')
parser.add_argument('-i', '--iterations', type=int, default=20000, help='Number of iteration')
parser.add_argument('-n', '--num', help='Number of rows to generate (default is input size)')
parser.add_argument('-r', '--records', help='Records file')
parser.add_argument('-v', '--verbose', metavar='N', type=int, default=0, help='Print KS distances every given number of iterations')

# parser.add_argument('-c', '--column', nargs='*', help='A column to use')
# parser.add_argument('-e', '--exclude', nargs='*', help='A column to exclude')

args = parser.parse_args()

if args.verbose:
    passes = int(args.iterations // args.verbose)
    iterations = args.verbose
else:
    passes = 1
    iterations = args.iterations

try:
    data = pd.read_csv(args.filename)
    print('columns: ' + ', '.join(data.columns.values))
    input_size = len(data)
    print('num of rows: ' + str(input_size))
    data.dropna(inplace=True)

    if args.num:
        num = args.num
    else:
        num = input_size

    print('synthesizing data...')

    start = time.time()
    from synthesized.common import BasicSynthesizer
    with BasicSynthesizer(data=data) as synthesizer:
        for i in range(passes):
            if args.records:
                synthesizer.learn(filenames=(args.records,), num_iterations=iterations)
            else:
                synthesizer.learn(data=data, num_iterations=iterations)
            if args.verbose:
                sample = synthesizer.synthesize(n=len(data))
                for col in data.columns.values:
                    distance = ks_2samp(data[col], sample[col])[0]
                    print(col, '{:.2f}'.format(distance), end=', ')
                print()
        synthesized = synthesizer.synthesize(n=num)
    print('took', time.time() - start, 's')
    synthesized.to_csv(args.output)

except Exception as e:
    sys.exit('error:' + str(e))
